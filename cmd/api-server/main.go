// Code generated by go-swagger; DO NOT EDIT.

package main

import (
	"log"
	"os"

	"github.com/go-openapi/loads"
	flags "github.com/jessevdk/go-flags"

	"github.com/webcustomerapi/restapi"
	"github.com/webcustomerapi/restapi/operations"

	"github.com/webcustomerapi/dbmodels"
	"encoding/json"
	"fmt"
)

// This file was generated by the swagger tool.
// Make sure not to overwrite this file after you generated it because all your edits would be lost!

func main() {
	dbmodels.InitDb()
	swaggerSpec, err := loads.Embedded(restapi.SwaggerJSON, restapi.FlatSwaggerJSON)
	if err != nil {
		log.Fatalln(err)
	}
	repos := dbmodels.Repositories{}

	 dbmodels.QueryRepos(&repos)
	
	out, _ := json.Marshal(repos)

	fmt.Println(string(out))

	api := operations.NewAPIAPI(swaggerSpec)
	server := restapi.NewServer(api)
	server.Port=8080
	defer server.Shutdown()

	parser := flags.NewParser(server, flags.Default)
	parser.ShortDescription = "BOTBIO"
	parser.LongDescription = swaggerSpec.Spec().Info.Description
	server.ConfigureFlags()
	for _, optsGroup := range api.CommandLineOptionsGroups {
		_, err := parser.AddGroup(optsGroup.ShortDescription, optsGroup.LongDescription, optsGroup.Options)
		if err != nil {
			log.Fatalln(err)
		}
	}

	if _, err := parser.Parse(); err != nil {
		code := 1
		if fe, ok := err.(*flags.Error); ok {
			if fe.Type == flags.ErrHelp {
				code = 0
			}
		}
		os.Exit(code)
	}

	server.ConfigureAPI()

	if err := server.Serve(); err != nil {
		log.Fatalln(err)
	}
	
}


// repository contains the details of a repository
type repositorySummary struct {
	ID         int
	Ip       string
	DateConnect      string
}

type repositories struct {
	Repositories []repositorySummary
}